output_filename <- paste0(output_directory, "/Complete_Annotated_", project_name ,"_Object.rds")
saveRDS(obj, output_filename)
winDialog("ok", "Script finished running")
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Label(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Label(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Label(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Label(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
View(umapDF)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Label(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
source(file)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Label(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
plotUMAP(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
Plot <- plotUMAP(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
View(Plot)
Plot <- LabelClusters(plot = Plot, id = 'obj.FineClust')
View(Plot)
Plot <- LabelClusters(plot = Plot, id = Plot@Data$obj.FineClust)
View(Plot)
Plot[["plot_env"]][["df"]][["obj.FineClust"]]
plot <- LabelClusters(plot = plot, id = obj.FineClust)
plot <- LabelClusters(plot = plot, id = 'obj.FineClust')
plot <- plotUMAP(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
plot <- plotUMAP(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
plot
View(umapDF)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Labels(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Labels(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Labels(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
# Source each file
for (file in r_files) {
source(file)
}
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Labels(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Labels(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Labels(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Labels_Int(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Labels(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Labels(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
output_filename <- paste0(output_directory, "/Clustering_04/Complete_Annotated_", project_name ,"_DimPlot_Label.png")
ggsave(filename = output_filename, width = 15, height = 10, dpi = 1200)
# Source each file
for (file in r_files) {
source(file)
}
plotUMAP_Labels(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
plotUMAP_Labels(umapDF, dataType="qualitative", cmap=cmaps_BOR$stallion, point_size=pointSize)
output_filename <- paste0(output_directory, "/Clustering_04/Complete_Annotated_", project_name ,"_DimPlot_Label.png")
ggsave(filename = output_filename, width = 15, height = 10, dpi = 1200)
### Parameters for batch processing of scRNA files
renv::restore()
r_files <- list.files(pattern = "\\.R$", full.names = TRUE)
# Source each file
for (file in r_files) {
source(file)
}
dir.create(paste0(output_directory_base, "/", project_name))
options(future.globals.maxSize = nThreads * 1000 * 1024^2)
#Set up work directory
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = output_directory)
y
# Seurat library
library(Seurat)
# General libraries
library(knitr)
library(devtools)
library(cowplot)
library(data.table)
library(dplyr)
library(future)
library(ggplot2)
library(ggrepel)
library(gridExtra)
library(Matrix)
library(patchwork)
library(readxl)
library(scales)
library(stringr)
library(tidyverse)
library(writexl)
library(DoubletFinder)
library(celda)
library(harmony)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(org.Hs.eg.db)
library(Rmagic)
library(viridis)
library(phateR)
library(ggthemes)
library(magick)
library(reticulate)
library(tidyr)
library(ggrastr)
library(renv)
#use_python("C:/Users/UVict/miniconda3/python.exe", required = TRUE)
#py_module_available("magic")
#import("magic")
#renv::init()
#renv::snapshot()
# Call the function with the correct directory path
read_all_mtx_and_create_seurat(directory = directory_mtx)
r_files <- list.files(pattern = "\\.R$", full.names = TRUE)
# Source each file
for (file in r_files) {
source(file)
}
# Call the function with the correct directory path
read_all_mtx_and_create_seurat(directory = directory_mtx)
# Retrieve all objects in the global environment that match the pattern "GSM_"
seurat.objects_names <- ls(envir = .GlobalEnv, pattern = "^GSM")
# Get the actual Seurat objects based on the names
seurat.objects <- mget(seurat.objects_names, envir = .GlobalEnv)
# Apply the processing function to each Seurat object
processed.seurats <- lapply(seurat.objects, Process_Seurat)
# Now, 'processed_seurats' is a list of processed Seurat objects.
# To replace the original Seurat objects in your global environment with the processed ones:
for (i in seq_along(processed.seurats)) {
assign(seurat.objects_names[i], processed.seurats[[i]], envir = .GlobalEnv)
}
# At this point, your original Seurat objects in the global environment have been replaced with the processed ones.
rm(processed.seurats)
rm(seurat.objects)
View(GSM6138434_HF1)
dir.create(paste0(output_directory_base, project_name, "/Clustering_01/"))
# Retrieve all objects in the global environment that match the pattern "seurat_"
seurat.objects_names <- ls(envir = .GlobalEnv, pattern = "^GSM")
# Get the actual Seurat objects based on the names
seurat.objects <- mget(seurat.objects_names, envir = .GlobalEnv)
# Apply the processing function to each Seurat object
processed.seurats <- Map(Process_Doublet_Removal, seurat_obj = seurat.objects, seurat_names = seurat.objects_names)
# Now, 'processed_seurats' is a list of processed Seurat objects.
# To replace the original Seurat objects in your global environment with the processed ones:
for (i in seq_along(processed.seurats)) {
assign(seurat.objects_names[i], processed.seurats[[i]], envir = .GlobalEnv)
}
rm(processed.seurats)
rm(seurat.objects)
seurat.objects_names <- ls(envir = .GlobalEnv, pattern = "^GSM")
seurat.objects <- mget(seurat.objects_names, envir = .GlobalEnv)
seurat.objects <- lapply(seurat.objects, runDecontX)
seurat.objects <- lapply(seurat.objects, Remove_lowRNA)
for (i in seq_along(seurat.objects)) {
assign(seurat.objects_names[i], seurat.objects[[i]], envir = .GlobalEnv)
}
rm(seurat.objects)
seurat.objects_names <- ls(envir = .GlobalEnv, pattern = "^GSM")
seurat.objects <- mget(seurat.objects_names, envir = .GlobalEnv)
for (i in 1:length(seurat.objects)) {
seurat.objects[[i]]@meta.data$orig.ident <- seurat.objects_names[i]
}
seurat_obj_merged <- merge(x=seurat.objects[[1]], y=seurat.objects[2:length(seurat.objects)], project=project_name)
seurat_obj_merged$diseaseStatus <- NA
seurat_obj_merged$diseaseStatus <- sapply(seurat_obj_merged$orig.ident, assign_disease_status, tags=tags)
rm(list = seurat.objects_names)
rm(seurat.objects)
View(seurat_obj_merged)
r_files <- list.files(pattern = "\\.R$", full.names = TRUE)
# Source each file
for (file in r_files) {
source(file)
}
seurat.objects_names <- ls(envir = .GlobalEnv, pattern = "^GSM")
seurat.objects <- mget(seurat.objects_names, envir = .GlobalEnv)
for (i in 1:length(seurat.objects)) {
seurat.objects[[i]]@meta.data$orig.ident <- seurat.objects_names[i]
}
View(seurat_obj_merged)
seurat.objects_names <- ls(envir = .GlobalEnv, pattern = "^GSM")
seurat.objects <- mget(seurat.objects_names, envir = .GlobalEnv)
for (i in 1:length(seurat.objects)) {
seurat.objects[[i]]@meta.data$orig.ident <- seurat.objects_names[i]
}
r_files <- list.files(pattern = "\\.R$", full.names = TRUE)
# Source each file
for (file in r_files) {
source(file)
}
seurat.objects_names <- ls(envir = .GlobalEnv, pattern = "^GSM")
seurat.objects <- mget(seurat.objects_names, envir = .GlobalEnv)
for (i in 1:length(seurat.objects)) {
seurat.objects[[i]]@meta.data$orig.ident <- seurat.objects_names[i]
}
gc()
### Parameters for batch processing of scRNA files
renv::restore()
r_files <- list.files(pattern = "\\.R$", full.names = TRUE)
# Source each file
for (file in r_files) {
source(file)
}
dir.create(paste0(output_directory_base, "/", project_name))
options(future.globals.maxSize = nThreads * 1000 * 1024^2)
#Set up work directory
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = output_directory)
# Seurat library
library(Seurat)
# General libraries
library(knitr)
library(devtools)
library(cowplot)
library(data.table)
library(dplyr)
library(future)
library(ggplot2)
library(ggrepel)
library(gridExtra)
library(Matrix)
library(patchwork)
library(readxl)
library(scales)
library(stringr)
library(tidyverse)
library(writexl)
library(DoubletFinder)
library(celda)
library(harmony)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(org.Hs.eg.db)
library(Rmagic)
library(viridis)
library(phateR)
library(ggthemes)
library(magick)
library(reticulate)
library(tidyr)
library(ggrastr)
library(renv)
#use_python("C:/Users/UVict/miniconda3/python.exe", required = TRUE)
#py_module_available("magic")
#import("magic")
#renv::init()
#renv::snapshot()
# Call the function with the correct directory path
read_all_mtx_and_create_seurat(directory = directory_mtx)
# Retrieve all objects in the global environment that match the pattern "GSM_"
seurat.objects_names <- ls(envir = .GlobalEnv, pattern = "^GSM")
# Get the actual Seurat objects based on the names
seurat.objects <- mget(seurat.objects_names, envir = .GlobalEnv)
# Apply the processing function to each Seurat object
processed.seurats <- lapply(seurat.objects, Process_Seurat)
# Now, 'processed_seurats' is a list of processed Seurat objects.
# To replace the original Seurat objects in your global environment with the processed ones:
for (i in seq_along(processed.seurats)) {
assign(seurat.objects_names[i], processed.seurats[[i]], envir = .GlobalEnv)
}
# At this point, your original Seurat objects in the global environment have been replaced with the processed ones.
rm(processed.seurats)
rm(seurat.objects)
dir.create(paste0(output_directory_base, project_name, "/Clustering_01/"))
# Retrieve all objects in the global environment that match the pattern "seurat_"
seurat.objects_names <- ls(envir = .GlobalEnv, pattern = "^GSM")
# Get the actual Seurat objects based on the names
seurat.objects <- mget(seurat.objects_names, envir = .GlobalEnv)
# Apply the processing function to each Seurat object
processed.seurats <- Map(Process_Doublet_Removal, seurat_obj = seurat.objects, seurat_names = seurat.objects_names)
# Now, 'processed_seurats' is a list of processed Seurat objects.
# To replace the original Seurat objects in your global environment with the processed ones:
for (i in seq_along(processed.seurats)) {
assign(seurat.objects_names[i], processed.seurats[[i]], envir = .GlobalEnv)
}
rm(processed.seurats)
rm(seurat.objects)
seurat.objects_names <- ls(envir = .GlobalEnv, pattern = "^GSM")
seurat.objects <- mget(seurat.objects_names, envir = .GlobalEnv)
seurat.objects <- lapply(seurat.objects, runDecontX)
seurat.objects <- lapply(seurat.objects, Remove_lowRNA)
for (i in seq_along(seurat.objects)) {
assign(seurat.objects_names[i], seurat.objects[[i]], envir = .GlobalEnv)
}
rm(seurat.objects)
seurat.objects_names <- ls(envir = .GlobalEnv, pattern = "^GSM")
seurat.objects <- mget(seurat.objects_names, envir = .GlobalEnv)
for (i in 1:length(seurat.objects)) {
seurat.objects[[i]]@meta.data$orig.ident <- seurat.objects_names[i]
}
seurat_obj_merged <- merge(x=seurat.objects[[1]], y=seurat.objects[2:length(seurat.objects)], project=project_name)
seurat_obj_merged$diseaseStatus <- NA
seurat_obj_merged$diseaseStatus <- sapply(seurat_obj_merged$orig.ident, assign_disease_status, tags=tags)
#rm(list = seurat.objects_names)
#rm(seurat.objects)
View(seurat_obj_merged)
unique(seurat_obj_merged$diseaseStatus)
rawCounts <- GetAssayData(object=seurat_obj_merged, slot="counts")
# Identify genes we want to blacklist during clustering
mt.genes <- grep(pattern = "^MT-", x = rownames(rawCounts), value = TRUE)
s.genes <- cc.genes$s.genes
# Seurat library
library(Seurat)
# General libraries
library(knitr)
library(devtools)
library(cowplot)
library(data.table)
library(dplyr)
library(future)
library(ggplot2)
library(ggrepel)
library(gridExtra)
library(Matrix)
library(patchwork)
library(readxl)
library(scales)
library(stringr)
library(tidyverse)
library(writexl)
library(DoubletFinder)
library(celda)
library(harmony)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(org.Hs.eg.db)
library(Rmagic)
library(viridis)
library(phateR)
library(ggthemes)
library(magick)
library(reticulate)
library(tidyr)
library(ggrastr)
library(renv)
rawCounts <- GetAssayData(object=seurat_obj_merged, slot="counts")
# Identify genes we want to blacklist during clustering
mt.genes <- grep(pattern = "^MT-", x = rownames(rawCounts), value = TRUE)
s.genes <- cc.genes$s.genes
# Seurat library
library(Seurat)
# General libraries
library(knitr)
library(devtools)
library(cowplot)
library(data.table)
library(dplyr)
library(future)
library(ggplot2)
library(ggrepel)
library(gridExtra)
library(Matrix)
library(patchwork)
library(readxl)
library(scales)
library(stringr)
library(tidyverse)
library(writexl)
library(DoubletFinder)
library(celda)
library(harmony)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(org.Hs.eg.db)
library(Rmagic)
library(viridis)
library(phateR)
library(ggthemes)
library(magick)
library(reticulate)
library(tidyr)
library(ggrastr)
library(renv)
r_files <- list.files(pattern = "\\.R$", full.names = TRUE)
# Source each file
for (file in r_files) {
source(file)
}
dir.create(paste0(output_directory_base, "/", project_name))
options(future.globals.maxSize = nThreads * 1000 * 1024^2)
#Set up work directory
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = output_directory)
rawCounts <- GetAssayData(object=seurat_obj_merged, slot="counts")
# Identify genes we want to blacklist during clustering
mt.genes <- grep(pattern = "^MT-", x = rownames(rawCounts), value = TRUE)
s.genes <- cc.genes$s.genes
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(org.Hs.eg.db)
mt.genes <- grep(pattern = "^MT-", x = rownames(rawCounts), value = TRUE)
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes
# Seurat library
library(Seurat)
mt.genes <- grep(pattern = "^MT-", x = rownames(rawCounts), value = TRUE)
s.genes <- cc.genes$s.genes
s.genes <- cc.genes@s.genes
detach("package:Seurat", unload = TRUE)
detach("package:SeuratObject", unload = TRUE)
library(Seurat)
library(SeuratObject)
library(Seurat)
rawCounts <- GetAssayData(object=seurat_obj_merged, slot="counts")
mt.genes <- grep(pattern = "^MT-", x = rownames(rawCounts), value = TRUE)
s.genes <- cc.genes@s.genes
g2m.genes <- cc.genes$g2m.genes
# Identify genes we want to blacklist during clustering
cc.genes
# Seurat library
library(Seurat)
# General libraries
library(knitr)
library(devtools)
library(cowplot)
library(data.table)
library(dplyr)
library(future)
library(ggplot2)
library(ggrepel)
library(gridExtra)
library(Matrix)
library(patchwork)
library(readxl)
library(scales)
library(stringr)
library(tidyverse)
library(writexl)
library(DoubletFinder)
library(celda)
library(harmony)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(org.Hs.eg.db)
library(Rmagic)
library(viridis)
library(phateR)
library(ggthemes)
library(magick)
library(reticulate)
library(tidyr)
library(ggrastr)
library(renv)
s.genes <- cc.genes@s.genes
y
library(devtools)
install_github("tmorikuicr/espresso")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(espresso)
set.seed(123)
library(seurat)
library(Seurat)
library(dplyr)
library(dplyr)
install.packages("dplyr")
r_files <- list.files(pattern = "\\.R$", full.names = TRUE)
# Source each file
for (file in r_files) {
source(file)
}
renv::restore()
r_files <- list.files(pattern = "\\.R$", full.names = TRUE)
# Source each file
for (file in r_files) {
source(file)
}
load_libraries(libraries)
